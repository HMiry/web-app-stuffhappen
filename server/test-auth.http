### Test Authentication Handling (Demo vs Logged-in Users)
### IMPORTANT: Update @demo_session_id and @real_session_id variables with actual session IDs from responses

### Step 1: Check initial auth status (should be unauthenticated)
GET http://localhost:3001/api/sessions/current
Content-Type: application/json

### Step 2: Test demo game session creation (no login required)
POST http://localhost:3001/api/game-sessions
Content-Type: application/json

{"theme_key":"university"}

### Step 3: Test demo next-card using session from Step 2 (no login required)
@demo_session_id = 9
GET http://localhost:3001/api/game-sessions/{{demo_session_id}}/next-card
Content-Type: application/json

### Step 4: Test demo round submission using unified API (no login required)
POST http://localhost:3001/api/game-sessions/{{demo_session_id}}/rounds
Content-Type: application/json

{
  "round_number": 1,
  "card_id": 10,
  "user_choice_position": 2,
  "time_taken": 15
}

### Step 5: Try second demo round (should fail with 403 - demo limit exceeded)
POST http://localhost:3001/api/game-sessions/{{demo_session_id}}/rounds
Content-Type: application/json

{
  "round_number": 2,
  "card_id": 34,
  "user_choice_position": 3,
  "time_taken": 20
}




### CHECK CURRENT SITUATION - See all cards played so far
GET http://localhost:3001/api/game-sessions/{{demo_session_id}}/rounds
Content-Type: application/json
### Step 9: Check final game status (should show "won" with 6 cards collected)
GET http://localhost:3001/api/game-sessions/{{demo_session_id}}

### Step 6: Login with valid credentials
POST http://localhost:3001/api/sessions
Content-Type: application/json

{"username":"hooman","password":"password123"}

### Step 7: Check auth status after login (should be authenticated)
GET http://localhost:3001/api/sessions/current
Content-Type: application/json

### Step 8: Create real game session (logged-in user)
POST http://localhost:3001/api/game-sessions
Content-Type: application/json

{"theme_key":"university"}

### Step 9: Test real game next-card (replace with actual session ID from Step 8)
@real_session_id = 7
GET http://localhost:3001/api/game-sessions/{{real_session_id}}/next-card
Content-Type: application/json

### Step 10: Test real game round submission (logged-in user)
POST http://localhost:3001/api/game-sessions/{{real_session_id}}/rounds
Content-Type: application/json

{
  "round_number": 1,
  "card_id": 20,
  "user_choice_position": 2,
  "time_taken": 15
}

### Step 11: Test real game round submission (logged-in user)
POST http://localhost:3001/api/game-sessions/{{real_session_id}}/rounds
Content-Type: application/json

{
  "round_number": 2,
  "card_id": 27,
  "user_choice_position": 2,
  "time_taken": 15
}


### CHECK CURRENT SITUATION - See all cards played so far
GET http://localhost:3001/api/game-sessions/{{real_session_id}}/rounds
Content-Type: application/json
### Step 9: Check final game status (should show "won" with 6 cards collected)
GET http://localhost:3001/api/game-sessions/{{real_session_id}}

### Step 11: Logout
DELETE http://localhost:3001/api/sessions/current
Content-Type: application/json

### Step 12: Verify logout (should be unauthenticated again)
GET http://localhost:3001/api/sessions/current
Content-Type: application/json

### Step 13: Create new demo session after logout (should still work)
POST http://localhost:3001/api/game-sessions
Content-Type: application/json

{"theme_key":"university"} 